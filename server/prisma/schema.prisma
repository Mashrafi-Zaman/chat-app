// server/prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"    // ‚Üê change from "sqlite" to "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String
  displayName  String
  avatarUrl    String?
  lastSeenAt   DateTime @default(now())
  createdAt    DateTime @default(now())

  memberships  Membership[]
  messages     Message[] @relation("author")
  subscription Subscription?
}

model Conversation {
  id           String   @id @default(cuid())
  isGroup      Boolean  @default(false)
  title        String?
  createdAt    DateTime @default(now())

  memberships  Membership[]
  messages     Message[]
}

model Membership {
  id             String       @id @default(cuid())
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String
  role           String       @default("member")
  joinedAt       DateTime     @default(now())
  lastReadMsgId  String?
}

model Message {
  id             String       @id @default(cuid())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String
  author         User         @relation("author", fields: [authorId], references: [id])
  authorId       String
  kind           String       // "text" | "image" | "file"
  text           String?
  fileUrl        String?
  createdAt      DateTime     @default(now())
  deliveredTo    Json         @default("[]") // array of userIds
  readBy         Json         @default("[]") // array of userIds
}

model Subscription {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
  json   Json
}
